services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  migrate:
    image: ghcr.io/${GITHUB_USERNAME}/api-service-migrate:latest
    build: .
    command: npm run migrate
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  app:
    image: ghcr.io/${GITHUB_USERNAME}/api-service-app:latest
    build: .
    ports:
      - "3000:3000"
    volumes:
      - applogs:/app/logs
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRES: ${JWT_EXPIRES}
      KAFKA_BROKER: ${KAFKA_BROKER}
      REVERSE_PROXY_ORIGIN: ${REVERSE_PROXY_ORIGIN}
      NODE_ENV: ${NODE_ENV}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - app-network

volumes:
  pgdata:
  applogs:

networks:
  app-network:
    driver: bridge
